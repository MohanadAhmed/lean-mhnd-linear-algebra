import data.matrix.basic
import data.matrix.rank
import data.matrix.notation
import data.fin.vec_notation
import data.complex.basic
import data.real.basic
import linear_algebra.matrix.pos_def
import tactic

open matrix
open_locale matrix big_operators complex_conjugate
def RŒ∑C := algebra_map ‚Ñù ‚ÑÇ

variables {m n p: Type*}
variables [fintype m][fintype n][fintype p]
variables [decidable_eq m][decidable_eq n][decidable_eq p]
variables {R: Type*} [comm_ring R]

lemma semiconj_RŒ∑C : function.semiconj RŒ∑C star star :=
begin
  intro x,
  simp_rw [RŒ∑C, is_R_or_C.star_def, is_R_or_C.conj_to_real, complex.coe_algebra_map, is_R_or_C.conj_of_real],
end

lemma compl_subtypes_ne {z: Type*}[fintype z]{pn: z ‚Üí Prop} :
     ‚àÄ (i : {a // pn a}) (j : {a // ¬¨pn a}), (i: z) ‚â† (j: z):= sorry

lemma conj_transpose_real (A: matrix m n ‚Ñù):
  A·¥¥ = A·µÄ := 
begin
  funext x y, simp only [conj_transpose_apply, is_R_or_C.star_def, is_R_or_C.conj_to_real, transpose_apply],
end

-- example {m n : ‚Ñï}
--   (A : matrix (fin m) (fin n) ‚ÑÇ) :
--   let hAHA : (A·¥¥ ‚¨ù A).is_hermitian := (is_hermitian_transpose_mul_self A),
--       V : matrix (fin n) (fin n) ‚ÑÇ := hAHA.eigenvector_matrix,
--       S : matrix (fin n) (fin n) ‚Ñù := diagonal hAHA.eigenvalues,
--       pn : fin n ‚Üí Prop := Œª (i : fin n), hAHA.eigenvalues i ‚â† 0,
--       e : {a // pn a} ‚äï {a // ¬¨pn a} ‚âÉ fin n := equiv.sum_compl pn,
--       Se : matrix ({a // pn a} ‚äï {a // ¬¨pn a})
--         ({a // pn a} ‚äï {a // ¬¨pn a})
--         ‚Ñù :=
--         (reindex e.symm e.symm) S,
--       S‚ÇÅ‚ÇÅ : matrix {a // pn a} {a // pn a} ‚Ñù := Se.to_blocks‚ÇÅ‚ÇÅ,
--       SœÉ : matrix {a // pn a} {a // pn a} ‚Ñù :=
--         diagonal (Œª (i : {a // pn a}), real.sqrt (S‚ÇÅ‚ÇÅ i i))
--   in S‚ÇÅ‚ÇÅ = diagonal (Œª i:{a // pn a}, hAHA.eigenvalues i) :=
-- begin
--   intros hAHA V S pn e Se S‚ÇÅ‚ÇÅ SœÉ,
--   change S‚ÇÅ‚ÇÅ with Se.to_blocks‚ÇÅ‚ÇÅ,
--   change Se with ((reindex e.symm e.symm) S),
--   rw to_blocks‚ÇÅ‚ÇÅ,
--   simp only [reindex_apply, equiv.symm_symm, submatrix_diagonal_equiv],
--   funext j k, 
--   rw of_apply,
--   by_cases hjk: j = k, rw hjk, 
--   rw [diagonal_apply_eq, diagonal_apply_eq, function.comp_app, equiv.sum_compl_apply_inl],
--   rw [diagonal_apply_ne, diagonal_apply_ne], 
--   exact hjk,
--   simp only [ne.def], exact hjk,
-- end

-- example {m n : ‚Ñï}
--   (A : matrix (fin m) (fin n) ‚ÑÇ) :
--   let hAHA : (A·¥¥ ‚¨ù A).is_hermitian := (is_hermitian_transpose_mul_self A),
--       V : matrix (fin n) (fin n) ‚ÑÇ := hAHA.eigenvector_matrix,
--       S : matrix (fin n) (fin n) ‚Ñù := diagonal hAHA.eigenvalues,
--       pn : fin n ‚Üí Prop := Œª (i : fin n), hAHA.eigenvalues i ‚â† 0,
--       e : {a // pn a} ‚äï {a // ¬¨pn a} ‚âÉ fin n := equiv.sum_compl pn,
--       Se : matrix ({a // pn a} ‚äï {a // ¬¨pn a})
--         ({a // pn a} ‚äï {a // ¬¨pn a})
--         ‚Ñù :=
--         (reindex e.symm e.symm) S,
--       S‚ÇÅ‚ÇÅ : matrix {a // pn a} {a // pn a} ‚Ñù := Se.to_blocks‚ÇÅ‚ÇÅ,
--       SœÉ : matrix {a // pn a} {a // pn a} ‚Ñù :=
--         diagonal (Œª (i : {a // pn a}), real.sqrt (S‚ÇÅ‚ÇÅ i i))
--   in SœÉ·¥¥‚Åª¬π ‚¨ù (S‚ÇÅ‚ÇÅ ‚¨ù SœÉ‚Åª¬π) = 1 :=
-- begin
--   intros hAHA V S pn e Se S‚ÇÅ‚ÇÅ SœÉ,
--   have SœÉ_inv : SœÉ‚Åª¬π = (matrix.diagonal (Œª i, (1 / real.sqrt (S‚ÇÅ‚ÇÅ i i)))), sorry,
--   have S‚ÇÅ‚ÇÅdiag : S‚ÇÅ‚ÇÅ = diagonal (Œª i:{a // pn a}, hAHA.eigenvalues i), sorry,
--   rw [‚Üê matrix.conj_transpose_nonsing_inv, SœÉ_inv, S‚ÇÅ‚ÇÅdiag, diagonal_conj_transpose,
--     has_trivial_star.star_trivial, diagonal_mul_diagonal, diagonal_mul_diagonal, ‚Üê diagonal_one, 
--     diagonal_eq_diagonal_iff],
--   intro i,
--   rw [diagonal_apply_eq, mul_comm, mul_assoc, div_mul_div_comm, one_mul, ‚Üê real.sqrt_mul,
--     real.sqrt_mul_self, mul_div_cancel'],
 
-- end

/-
example {m n : ‚Ñï}
  (A : matrix (fin m) (fin n) ‚ÑÇ) :
  let hAHA : (A·¥¥ ‚¨ù A).is_hermitian := (is_hermitian_transpose_mul_self A),
      V : matrix (fin n) (fin n) ‚ÑÇ := hAHA.eigenvector_matrix,
      S : matrix (fin n) (fin n) ‚Ñù := diagonal hAHA.eigenvalues,
      pn : fin n ‚Üí Prop := Œª (i : fin n), hAHA.eigenvalues i ‚â† 0,
      e : {a // pn a} ‚äï {a // ¬¨pn a} ‚âÉ fin n := equiv.sum_compl pn,
      Se : matrix ({a // pn a} ‚äï {a // ¬¨pn a})
        ({a // pn a} ‚äï {a // ¬¨pn a})
        ‚Ñù :=
        (reindex e.symm e.symm) S,
      S‚ÇÅ‚ÇÅ : matrix {a // pn a} {a // pn a} ‚Ñù := Se.to_blocks‚ÇÅ‚ÇÅ,
      S‚ÇÅ‚ÇÇ : matrix {a // pn a} {a // ¬¨pn a} ‚Ñù := Se.to_blocks‚ÇÅ‚ÇÇ,
      S‚ÇÇ‚ÇÅ : matrix {a // ¬¨pn a} {a // pn a} ‚Ñù := Se.to_blocks‚ÇÇ‚ÇÅ,
      S‚ÇÇ‚ÇÇ : matrix {a // ¬¨pn a} {a // ¬¨pn a} ‚Ñù := Se.to_blocks‚ÇÇ‚ÇÇ,
      eb : fin n ‚äï fin 0 ‚âÉ fin n := equiv.sum_empty (fin n) (fin 0),
      V‚ÇÅ : matrix (fin n) {a // pn a} ‚ÑÇ :=
        ((reindex eb.symm e.symm) V).to_blocks‚ÇÅ‚ÇÅ,
      V‚ÇÇ : matrix (fin n) {a // ¬¨pn a} ‚ÑÇ :=
        ((reindex eb.symm e.symm) V).to_blocks‚ÇÅ‚ÇÇ,
      SœÉ : matrix {a // pn a} {a // pn a} ‚Ñù :=
        diagonal (Œª (i : {a // pn a}), real.sqrt (S‚ÇÅ‚ÇÅ i i)),
      U‚ÇÅ : matrix (fin m) {a // pn a} ‚ÑÇ :=
        A ‚¨ù V‚ÇÅ ‚¨ù SœÉ‚Åª¬π.map RŒ∑C
  in S.map RŒ∑C = diagonal (coe ‚àò hAHA.eigenvalues) ‚Üí
     A·¥¥ ‚¨ù A = V ‚¨ù S.map RŒ∑C ‚¨ù V·¥¥ ‚Üí
     S = (reindex e e) (from_blocks S‚ÇÅ‚ÇÅ S‚ÇÅ‚ÇÇ S‚ÇÇ‚ÇÅ S‚ÇÇ‚ÇÇ) ‚Üí
     S‚ÇÅ‚ÇÇ = 0 ‚Üí
     S‚ÇÇ‚ÇÅ = 0 ‚Üí
     S‚ÇÇ‚ÇÇ = 0 ‚Üí
     V = (reindex eb e) (from_blocks V‚ÇÅ V‚ÇÇ vec_empty vec_empty) ‚Üí
     A·¥¥ ‚¨ù A = V‚ÇÅ ‚¨ù S‚ÇÅ‚ÇÅ.map RŒ∑C ‚¨ù V‚ÇÅ·¥¥ ‚Üí
     V·¥¥ ‚¨ù V = 1 ‚Üí
     V‚ÇÅ·¥¥ ‚¨ù V‚ÇÅ = 1 ‚àß
       V‚ÇÅ·¥¥ ‚¨ù V‚ÇÇ = 0 ‚àß
         V‚ÇÇ·¥¥ ‚¨ù V‚ÇÅ = 0 ‚àß V‚ÇÇ·¥¥ ‚¨ù V‚ÇÇ = 1 ‚Üí
     V‚ÇÅ·¥¥ ‚¨ù V‚ÇÅ = 1 ‚Üí U‚ÇÅ·¥¥ ‚¨ù U‚ÇÅ = 1 :=
begin
  intros hAHA V S pn e Se S‚ÇÅ‚ÇÅ S‚ÇÅ‚ÇÇ S‚ÇÇ‚ÇÅ S‚ÇÇ‚ÇÇ eb V‚ÇÅ V‚ÇÇ SœÉ U‚ÇÅ SRŒ∑C 
    spectralAHA Sblock hS‚ÇÅ‚ÇÇ hS‚ÇÇ‚ÇÅ hS‚ÇÇ‚ÇÇ Vblock reducedSpectral Vinv Vbh V‚ÇÅinv,  
  change U‚ÇÅ with A ‚¨ù V‚ÇÅ ‚¨ù SœÉ‚Åª¬π.map RŒ∑C,
  have threeSs :  SœÉ·¥¥‚Åª¬π ‚¨ù (S‚ÇÅ‚ÇÅ ‚¨ù SœÉ‚Åª¬π) = 1, sorry,
  rw [conj_transpose_mul, conj_transpose_mul, matrix.mul_assoc, matrix.mul_assoc, 
    matrix.mul_assoc A, ‚Üê matrix.mul_assoc A·¥¥],
  conv_lhs {congr, skip, congr, skip, congr, rw reducedSpectral,},
  rw [matrix.mul_assoc, ‚Üê matrix.mul_assoc _ V‚ÇÅ, V‚ÇÅinv, matrix.one_mul, matrix.mul_assoc V‚ÇÅ,
    ‚Üê matrix.mul_assoc _ V‚ÇÅ, V‚ÇÅinv, matrix.one_mul, ‚Üê conj_transpose_map, 
    conj_transpose_nonsing_inv, ‚Üê matrix.map_mul, ‚Üê matrix.map_mul, threeSs,
    matrix.map_one RŒ∑C (map_zero RŒ∑C) (map_one RŒ∑C)],
  exact  semiconj_RŒ∑C,
end
-/

lemma ker_mat_mul_self_conj_transpose (A: matrix n m ‚ÑÇ)(B: matrix n p ‚ÑÇ) :
  (A‚¨ùA·¥¥)‚¨ùB = 0 ‚Üî A·¥¥‚¨ùB = 0 := begin
  sorry,
end

lemma modified_spectral_theorem {A: matrix n n ‚ÑÇ}(hA: A.is_hermitian) :
  A = (hA.eigenvector_matrix) ‚¨ù 
    (matrix.diagonal (coe ‚àò hA.eigenvalues)).mul hA.eigenvector_matrix_inv := 
begin
  sorry,
end

lemma matrix.left_mul_inj_of_invertible (P : matrix m m R) [invertible P] :
  function.injective (Œª (x : matrix m n R), P ‚¨ù x) := 
begin
  let hdetP_unit := matrix.is_unit_det_of_invertible P,
  rintros x a hax, 
  replace hax := congr_arg (Œª (x : matrix m n R), P‚Åª¬π ‚¨ù x) hax,
  simp only [inv_mul_cancel_left_of_invertible] at hax,
  exact hax,
end

lemma matrix.is_hermitian.eigenvector_matrix_mul_inv' 
{ùïú : Type u_1} [is_R_or_C ùïú] [decidable_eq ùïú] {n : Type u_2} [fintype n] [decidable_eq n] 
{A : matrix n n ùïú} (hA : A.is_hermitian) :
hA.eigenvector_matrix_inv.mul hA.eigenvector_matrix = 1 := begin
sorry,
end

--/-!

example {m n : ‚Ñï}
  (A : matrix (fin m) (fin n) ‚ÑÇ) :
  let 
    hAAH : (A ‚¨ù A·¥¥).is_hermitian := (is_hermitian_mul_conj_transpose_self A),
    S := diagonal hAAH.eigenvalues,
    pm : fin m ‚Üí Prop := Œª (i : fin m), hAAH.eigenvalues i ‚â† 0,
    em : {a // pm a} ‚äï {a // ¬¨pm a} ‚âÉ fin m := equiv.sum_compl pm,
    Se : matrix ({a // pm a} ‚äï {a // ¬¨pm a})
      ({a // pm a} ‚äï {a // ¬¨pm a})
      ‚Ñù :=
      (reindex em.symm em.symm) S,
    S‚ÇÅ‚ÇÅ := Se.to_blocks‚ÇÅ‚ÇÅ,
    S‚ÇÅ‚ÇÇ := Se.to_blocks‚ÇÅ‚ÇÇ,
    S‚ÇÇ‚ÇÅ := Se.to_blocks‚ÇÇ‚ÇÅ,
    S‚ÇÇ‚ÇÇ := Se.to_blocks‚ÇÇ‚ÇÇ,
    ebm : fin m ‚äï fin 0 ‚âÉ fin m := equiv.sum_empty (fin m) (fin 0),
    U : matrix (fin m) (fin m) ‚ÑÇ := hAAH.eigenvector_matrix,
    U‚ÇÇ : matrix (fin m) {a // ¬¨pm a} ‚ÑÇ :=
        ((reindex ebm.symm em.symm) U).to_blocks‚ÇÅ‚ÇÇ
  in S = (reindex em em) (from_blocks S‚ÇÅ‚ÇÅ S‚ÇÅ‚ÇÇ S‚ÇÇ‚ÇÅ S‚ÇÇ‚ÇÇ) ‚Üí
     S‚ÇÅ‚ÇÇ = 0 ‚Üí
     S‚ÇÇ‚ÇÅ = 0 ‚Üí
     S‚ÇÇ‚ÇÇ = 0 ‚Üí
     S‚ÇÅ‚ÇÅ = diagonal (Œª (i : {a // pm a}), hAAH.eigenvalues ‚Üëi) ‚Üí
    A·¥¥‚¨ùU‚ÇÇ = 0 :=
begin
  intros hAAH S pm em Se S‚ÇÅ‚ÇÅ S‚ÇÅ‚ÇÇ S‚ÇÇ‚ÇÅ S‚ÇÇ‚ÇÇ  ebm U U‚ÇÇ Sblock hS‚ÇÅ‚ÇÇ hS‚ÇÇ‚ÇÅ hS‚ÇÇ‚ÇÇ hS‚ÇÅ‚ÇÅdiag,
  
  rw ‚Üê ker_mat_mul_self_conj_transpose,
  have spectralAAH := modified_spectral_theorem hAAH,
  -- haveI : fintype {a // ¬¨pm a} := sorry,
  -- haveI : fintype {a // pm a} := sorry,
  -- haveI : fintype {a // pn a} := sorry,
  -- haveI : fintype {a // ¬¨pn a} := sorry,
  rw spectralAAH,
  clear spectralAAH,
  apply_fun matrix.mul hAAH.eigenvector_matrix_inv,
  rw ‚Üê matrix.mul_assoc,
  rw ‚Üê matrix.mul_assoc,
  rw matrix.is_hermitian.eigenvector_matrix_mul_inv' hAAH,
  rw matrix.one_mul,
  rw matrix.mul_zero,
  apply_fun (reindex (em.symm) (equiv.refl _)),
  rw reindex_apply,
  rw reindex_apply,
  rw submatrix_zero,
  simp only [equiv.symm_symm, equiv.refl_symm, equiv.coe_refl, dmatrix.zero_apply],
  rw ‚Üê submatrix_mul_equiv _ _ _ (equiv.refl _) _,
  rw ‚Üê submatrix_mul_equiv _ _ _ em _,
  change U‚ÇÇ with ((reindex ebm.symm em.symm) U).to_blocks‚ÇÅ‚ÇÇ,
  change U with hAAH.eigenvector_matrix,
  rw to_blocks‚ÇÅ‚ÇÇ,
  simp only [submatrix_diagonal_equiv, equiv.coe_refl, reindex_apply, equiv.symm_symm, submatrix_apply, 
  equiv.sum_empty_apply_inl, equiv.sum_compl_apply_inr, submatrix_id_id, of_apply],
  funext i j,
  cases i,
  { rw matrix.mul_assoc,
  simp_rw [matrix.mul_apply, finset.mul_sum, diagonal_apply, ite_mul, zero_mul, function.comp_app],
  simp only [equiv.sum_compl_apply_inl, submatrix_apply, id.def, of_apply, finset.sum_ite_irrel, 
    finset.sum_const_zero, finset.sum_ite_eq, finset.mem_univ, if_true, dmatrix.zero_apply],
  rw [‚Üê finset.mul_sum, ‚Üê mul_apply, matrix.is_hermitian.eigenvector_matrix_mul_inv', 
    one_apply_ne, mul_zero], apply compl_subtypes_ne, },

  { simp only [submatrix_diagonal_equiv, equiv.coe_refl, submatrix_id_id, dmatrix.zero_apply],
    simp_rw [matrix.mul_apply, finset.sum_mul, diagonal_apply, ite_mul, zero_mul, function.comp_app],
    simp only [equiv.sum_compl_apply_inr, submatrix_apply, id.def, finset.sum_ite_eq, finset.mem_univ, if_true],
    have : hAAH.eigenvalues i = 0, 
    { apply not_not.1, rw ‚Üê ne.def,
      apply i.prop, },
    simp_rw [this, complex.of_real_zero, zero_mul, finset.sum_const_zero], },

  apply matrix.left_mul_inj_of_invertible,
  -- funext i j,
  -- cases i,
  -- change U‚ÇÇ with ((reindex ebm.symm em.symm) U).to_blocks‚ÇÅ‚ÇÇ,
  -- change U with hAAH.eigenvector_matrix,
  -- rw to_blocks‚ÇÅ‚ÇÇ,
  -- simp only [submatrix_diagonal_equiv, equiv.coe_refl, reindex_apply, equiv.symm_symm, 
  --   submatrix_apply, equiv.sum_empty_apply_inl, equiv.sum_compl_apply_inr, submatrix_id_id,
  --   dmatrix.zero_apply],
  -- simp_rw [matrix.mul_apply, finset.sum_mul, diagonal_apply, ite_mul, zero_mul, function.comp_app],
  -- simp only [equiv.sum_compl_apply_inl, equiv.sum_compl_apply_inr, submatrix_apply, 
  --   id.def, finset.sum_ite_eq, finset.mem_univ, if_true, of_apply],
  -- -- simp only [submatrix_diagonal_equiv, equiv.coe_refl, submatrix_id_id, dmatrix.zero_apply],
  -- -- simp_rw [matrix.mul_apply, finset.sum_mul, diagonal_apply, ite_mul, zero_mul, function.comp_app],
  -- -- simp only [equiv.sum_compl_apply_inl, submatrix_apply, id.def, finset.sum_ite_eq, finset.mem_univ, if_true],
  
  -- sorry,
  -- simp only [submatrix_diagonal_equiv, equiv.coe_refl, submatrix_id_id, dmatrix.zero_apply],
  -- simp_rw [matrix.mul_apply, finset.sum_mul, diagonal_apply, ite_mul, zero_mul, function.comp_app],
  -- simp only [equiv.sum_compl_apply_inr, submatrix_apply, id.def, finset.sum_ite_eq, finset.mem_univ, if_true],
  -- have : hAAH.eigenvalues i = 0, {
  --   apply not_not.1, rw ‚Üê ne.def,
  --   apply i.prop,
  -- },
  -- simp_rw [this, complex.of_real_zero, zero_mul, finset.sum_const_zero],
  -- exact (fin.fintype m),
  -- apply matrix.left_mul_inj_of_invertible,
end


